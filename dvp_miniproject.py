# -*- coding: utf-8 -*-
"""DVP_miniproject.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1UUqro4xjKKDEkgD0WgTXPC92_DtnknvC
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

from google.colab import files
uploaded = files.upload()

data = pd.read_csv("webseries (2).csv")
print(data)

print(data.head(15))          #printing 15 lines from start and end
print(data.tail(15))

# Plotting the ratings distribution using a histogram
plt.figure(figsize=(8, 6))
plt.hist(data['ratings'], bins=10, color='skyblue', edgecolor='black')
plt.title('Ratings Distribution of WEBSeries')
plt.xlabel('Ratings')
plt.ylabel('Frequency')
plt.grid(True)
plt.show()

#a visualization to compare the number of WEBseries available on each OTT platform using a bar chart
# we will count the occurrences of each platform and then plot the results.

# Count the number of TV series on each OTT platform
platform_counts = data['ott_platform'].value_counts()

# Plotting the bar chart
plt.figure(figsize=(10, 6))
platform_counts.plot(kind='bar', color='skyblue')
plt.title('Number of WEBSeries on Each OTT Platform')
plt.xlabel('OTT Platform')
plt.ylabel('Number of TV Series')
plt.xticks(rotation=45)  # Rotate x-axis labels for better readability
plt.grid(axis='y')  # Show gridlines on the y-axis
plt.tight_layout()  # Adjust layout to prevent clipping of labels
plt.show()

"""we can see that most of the webseries is available on netflix thus it will be beneficial for the customers to subscribe netflix

Since Netflix seems to have the highest number of TV series in your dataset, it would be interesting to visualize the distribution of ratings for TV series available on Netflix compared to other platforms

**RATING DISTRIBUTION of NETFLIX and other OTT platforms**
"""

# Filter the DataFrame to include only TV series available on Netflix
netflix_series = data[data['ott_platform'] == 'Netflix']

# Filter the DataFrame to include TV series not available on Netflix
other_series = data[data['ott_platform'] != 'Netflix']

# Plotting the distribution of ratings for Netflix series and other series
plt.figure(figsize=(10, 6))

# Plotting Netflix series ratings
plt.hist(netflix_series['ratings'], bins=10, color='red', alpha=0.5, label='Netflix')

# Plotting ratings of series on other platforms
plt.hist(other_series['ratings'], bins=10, color='blue', alpha=0.5, label='Other Platforms')

plt.title('Distribution of Ratings for TV Series on Netflix vs Other Platforms')
plt.xlabel('Ratings')
plt.ylabel('Frequency')
plt.legend()
plt.grid(True)
plt.show()


#netflixseries vs rating

# Count the number of WEB series in each genre
genre_counts = data['genre'].value_counts()

# Plotting the genre distribution using a bar chart
plt.figure(figsize=(20, 6))
genre_counts.plot(kind='bar', color='skyblue')
plt.title('Genre Distribution of WEBSeries')
plt.xlabel('Genre')
plt.ylabel('Number of WEBSeries')
plt.xticks(rotation=90)  # Rotate x-axis labels for better readability
plt.grid(axis='y')  # Show gridlines on the y-axis
plt.tight_layout()  # Adjust layout to prevent clipping of labels
plt.show()

"""Lesser the number of episodes , more impactful the series is

**TOP** **PERFORMERS**
"""

performers = data['performers'].str.split(', ', expand=True).stack()

# Count the occurrences of each performer
top_performers = performers.value_counts().head(10)  # Adjust the number based on your preference

# Plotting the top performers
plt.figure(figsize=(10, 6))
top_performers.plot(kind='bar', color='skyblue')
plt.title('Top Performers in TV Series')
plt.xlabel('Performer')
plt.ylabel('Number of Appearances')
plt.xticks(rotation=45)  # Rotate x-axis labels for better readability
plt.grid(axis='y')  # Show gridlines on the y-axis
plt.tight_layout()  # Adjust layout to prevent clipping of labels
plt.show()

"""**DIRECTOR** **ANALYSIS**

"""

directors = data['director_name'].str.split(', ', expand=True).stack()

# Count the occurrences of each director
director_counts = directors.value_counts()

# Plotting the director analysis using a bar chart
plt.figure(figsize=(32, 6))
director_counts.plot(kind='bar', color='skyblue')
plt.title('Director Analysis of TV Series')
plt.xlabel('Director')
plt.ylabel('Number of TV Series')
plt.xticks(rotation=90)
plt.grid(axis='y')
plt.tight_layout()
plt.show()

# Plotting rating vs. genre using a scatter plot
plt.figure(figsize=(14, 20))
plt.scatter(data['ratings'], data['genre'], color='green', alpha=0.6)
plt.title('Rating vs. Genre')
plt.xlabel('Ratings')
plt.ylabel('Genre')
plt.grid(True)
plt.tight_layout()
plt.show()

"""**Rating trends over time**"""

#as there is no release year present in the dataset we cannot tell that which is the best year for the OTT platforms

"""**PLATFORM VS GENRE**"""

platform_genre_counts = data.groupby(['ott_platform', 'genre']).size().unstack(fill_value=0)

# Plotting platform vs. genre using a stacked bar chart
plt.figure(figsize=(12, 8))
platform_genre_counts.plot(kind='bar', stacked=True, cmap='tab20')
plt.title('Platform vs. Genre')
plt.xlabel('OTT Platform')
plt.ylabel('Number of TV Series')
plt.xticks(rotation=90)  # Rotate x-axis labels for better readability
plt.legend(title='Genre', bbox_to_anchor=(1.05, 1), loc='upper left')
plt.tight_layout()
plt.show()

